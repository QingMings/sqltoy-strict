/**
 *@Generated by sagacity-quickvo 4.16
 */
package com.strict.modules.sagacity.entity;

import java.util.List;

import org.sagacity.sqltoy.config.annotation.SqlToyEntity;

import com.strict.modules.sagacity.entity.base.AbstractDictType;

/**
 * @project sqltoy-strict
 * @author zhongxuchen
 * @version 1.0.0
 * Table: sag_dict_type,Remark:字典分类表 	
 */
@SqlToyEntity
public class DictType extends AbstractDictType {	
	/**
	 * 
	 */
	private static final long serialVersionUID = 426724547793495250L;
	
	/** default constructor */
	public DictType() {
		super();
	}
	
	/*---begin-constructor-area---don't-update-this-area--*/
	/** pk constructor */
	public DictType(String dictType)
	{
		this.dictType=dictType;
	}

	/**
	 * mapping sag_dict_detail data to sag_dict_type oneToMany List
	 */
	public void mappingDictDetails(List<DictType> mainSet,List<DictDetail> itemSet)
    {
    	if(mainSet==null || mainSet.isEmpty() || itemSet==null||itemSet.isEmpty())
    		return;
    	DictType main;
    	DictDetail item;
    	for(int i=0;i<mainSet.size();i++){
    		main=mainSet.get(i);
    		if(itemSet.size()==0)
    			break;
    		for(int j=0;j<itemSet.size();j++){
    			item=itemSet.get(j);
    			if(main.getDictType().equals(item.getDictType())){
    			  main.dictDetails.add(item);
    			  itemSet.remove(j);
    			  j--;
    			}
    		}
    	}
    }
	/*---end-constructor-area---don't-update-this-area--*/

	/**
     * @todo vo columns to String
     */
    @Override
	public String toString() {
		return super.toString();
	}
	
	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#clone()
	 */
	@Override
	public DictType clone() {
		try {
			return (DictType) super.clone();
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
		}
		return null;
	}
	
}
